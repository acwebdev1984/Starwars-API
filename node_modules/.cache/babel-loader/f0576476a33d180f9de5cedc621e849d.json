{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Al & Laura\\\\Desktop\\\\starwars-api\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Al & Laura\\\\Desktop\\\\starwars-api\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Al & Laura\\\\Desktop\\\\starwars-api\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Al & Laura\\\\Desktop\\\\starwars-api\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Al & Laura\\\\Desktop\\\\starwars-api\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Al & Laura\\\\Desktop\\\\starwars-api\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // importing required companants and functions\n\nimport PeopleList from './PeopleList';\nimport Button from './Button.js'; // standard Syntax that allows changes to state ( in this case, i will be changing the state of array [] & selection)\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.onButtonSelection = function (type) {\n      _this.setState({\n        selection: type\n      });\n    };\n\n    _this.state = {\n      array: [],\n      selection: 'noSelect'\n    };\n    return _this;\n  } // The Below function, accepts a type prop (taken from the button in button.js) and sets the state of the selection, \n  // using this 'type'/prop\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          array = _this$state.array,\n          selection = _this$state.selection; // in order to allow other componants, to use the current state of the array/section, \n      //i have created a variable \"array, section\" using de-structuring to pass these variables to PeopleList\n\n      if (this.state.selection === 'people') {\n        fetch('https://swapi.co/api/people/').then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          return _this2.setState({\n            array: data.results\n          });\n        }); // above I have used \"data.results\", to specifically set the results section of the array pulled from the API \n        // se https://swapi.co/api/people/ to understand clearly, looking for \"results in the return\"\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \" Star Wars API\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \" Use the Buttons to search for Movie data\"), React.createElement(Button, {\n        onButtonSelection: this.onButtonSelection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(PeopleList, {\n        array: array,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Al & Laura\\Desktop\\starwars-api\\src\\App.js"],"names":["React","Component","PeopleList","Button","App","onButtonSelection","type","setState","selection","state","array","fetch","then","response","json","data","results"],"mappings":";;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;IACMC,G;;;;;AAEH,iBAAc;AAAA;;AAAA;;AACb;;AADa,UAUhBC,iBAVgB,GAUI,UAACC,IAAD,EAAU;AAC7B,YAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAEF;AAAZ,OAAd;AACD,KAZgB;;AAEb,UAAKG,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXF,MAAAA,SAAS,EAAE;AAFA,KAAb;AAFa;AAMd,G,CAEH;AACA;;;;;6BAOW;AAAA;;AAAA,wBACoB,KAAKC,KADzB;AAAA,UACAC,KADA,eACAA,KADA;AAAA,UACOF,SADP,eACOA,SADP,EAEP;AACA;;AACA,UAAI,KAAKC,KAAL,CAAWD,SAAX,KAAyB,QAA7B,EAAuC;AACjCG,QAAAA,KAAK,CAAC,8BAAD,CAAL,CACHC,IADG,CACE,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SADV,EAEHF,IAFG,CAEE,UAAAG,IAAI;AAAA,iBAAI,MAAI,CAACR,QAAL,CAAc;AAACG,YAAAA,KAAK,EAACK,IAAI,CAACC;AAAZ,WAAd,CAAJ;AAAA,SAFN,EADiC,CAIrC;AACA;AACH;;AACC,aAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFA,EAGA,oBAAC,MAAD;AAAQ,QAAA,iBAAiB,EAAG,KAAKX,iBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,EAIA,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAIK,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJA,CAFD;AAWC;;;;EAxCaT,S;;AA6ClB,eAAeG,GAAf","sourcesContent":["\n\nimport React, { Component } from 'react';\n// importing required companants and functions\nimport PeopleList from './PeopleList';\nimport Button from './Button.js';\n\n// standard Syntax that allows changes to state ( in this case, i will be changing the state of array [] & selection)\nclass App extends Component {\n\n   constructor() {\n    super()\n    this.state = {\n      array: [],\n      selection: 'noSelect',\n    };\n  }\n\n// The Below function, accepts a type prop (taken from the button in button.js) and sets the state of the selection, \n// using this 'type'/prop\n onButtonSelection = (type) => {\n  this.setState({selection: type});\n}\n\n \n\n  render() {\n    const {array, selection} = this.state;\n    // in order to allow other componants, to use the current state of the array/section, \n    //i have created a variable \"array, section\" using de-structuring to pass these variables to PeopleList\n    if (this.state.selection === 'people' ){\n          fetch('https://swapi.co/api/people/') \n      .then(response => response.json())\n      .then(data => this.setState({array:data.results}));\n      // above I have used \"data.results\", to specifically set the results section of the array pulled from the API \n      // se https://swapi.co/api/people/ to understand clearly, looking for \"results in the return\"\n  }    \n    return (\n   \n     <div>\n     <h1> Star Wars API</h1>\n     <h2> Use the Buttons to search for Movie data</h2>\n     <Button onButtonSelection ={this.onButtonSelection}/>\n     <PeopleList array = {array}/>\n     </div> \n    \n    );\n\n    }\n\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}